{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7e4260f7",
   "metadata": {},
   "source": [
    "# User - Asset Registry"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24e78804",
   "metadata": {},
   "source": [
    "### imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "bf2e1318",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import json"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae42dc14",
   "metadata": {},
   "source": [
    "### Web app deployed URLs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "998b8727",
   "metadata": {},
   "outputs": [],
   "source": [
    "asset_registry_base = \"http://143.198.58.1\"\n",
    "user_registry_base = \"http://138.197.50.41\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f245433b",
   "metadata": {},
   "source": [
    "### User Registry signup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "f78e6205",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Response [200]>\n"
     ]
    }
   ],
   "source": [
    "req_body = {'email': 'test@test.com', 'phone_num': '011112223333', 'password': 'Asdf1234', 'confirm_pass': 'Abcd@1234', 'discoverable': \n",
    "            True}\n",
    "res = requests.post(user_registry_base + \"/signup\", json=req_body)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de93314d",
   "metadata": {},
   "source": [
    "#### Blacklisted email cannot be registered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "3c2db7d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'message': 'This email is blacklisted'}\n"
     ]
    }
   ],
   "source": [
    "# shouldn't be allowed to register since it is blacklisted\n",
    "req_body = {'email': 'fishy@fishy.com', 'phone_num': '011112223333', 'password': 'Asdf1234', 'confirm_pass': 'Asdf1234', 'discoverable': \n",
    "            True}\n",
    "res = requests.post(user_registry_base + \"/signup\", json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "616048e6",
   "metadata": {},
   "source": [
    "#### Sign up with valid email"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "9b385fe6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'message': 'A user with this email already exists'}\n"
     ]
    }
   ],
   "source": [
    "req_body = {'email': 'test4@test.com', 'phone_num': '011112223333', 'password': 'Asdf1234', 'confirm_pass': 'Asdf1234', 'discoverable': \n",
    "            True}\n",
    "res = requests.post(user_registry_base + \"/signup\", json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97a189e0",
   "metadata": {},
   "source": [
    "#### Fetching the JWT token"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "a8963ca9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'access_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NDY4ODE1NiwianRpIjoiNDhlYTU3ZDgtZGI1YS00YzlkLTkwYjYtZTEyOWE4YWNjMDhjIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6NCwibmJmIjoxNjc0Njg4MTU2LCJleHAiOjE2NzQ3MDI1NTYsImRvbWFpbiI6ImdtYWlsLmNvbSJ9.YvlNuGklWpXps6v_8B4iAuh1fWZvflS5D9UhbAg1EW8', 'refresh_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NDY4ODE1NiwianRpIjoiNTQxNTFjZDYtYjY1My00ODJiLWI0ZmMtNzRhNjBmMjc4ZDdlIiwidHlwZSI6InJlZnJlc2giLCJzdWIiOjQsIm5iZiI6MTY3NDY4ODE1NiwiZXhwIjoxNjc0Nzc0NTU2fQ.RyEb_GZbfbVh6PDOMO0xnHLmCBXjiaCgW0iDvmZfkzY'}\n"
     ]
    }
   ],
   "source": [
    "# this endpoint returns tokens if the given user is registered\n",
    "req_body = {'email': 'aanish@gmail.com', 'password': 'Helloesk!2'}\n",
    "res = requests.post(user_registry_base, json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09252a5a",
   "metadata": {},
   "source": [
    "#### Incorrect password"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "ae669ab4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'message': 'Incorrect Password!'}\n"
     ]
    }
   ],
   "source": [
    "# incorrect password\n",
    "req_body = {'email': 'test@test.com', 'password': 'incorrect'}\n",
    "res = requests.post(user_registry_base, json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39045628",
   "metadata": {},
   "source": [
    "### Access token and Refresh token"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "12af8585",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'access_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NDY4ODE1OCwianRpIjoiZTBmMmUxMjYtYjU2OC00YzQ4LTg0MzktYmZhNjdiY2I1OWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6NCwibmJmIjoxNjc0Njg4MTU4LCJleHAiOjE2NzQ3MDI1NTgsImRvbWFpbiI6ImdtYWlsLmNvbSJ9.Q1sazt8E_t1qOwMp2E_cVj574e_p14r-dxbqbUaMrIM', 'refresh_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NDY4ODE1OCwianRpIjoiNTdiNTFmZDItNzcwMS00OWJkLWIzNmUtZGYzNmEzZjRhZTIzIiwidHlwZSI6InJlZnJlc2giLCJzdWIiOjQsIm5iZiI6MTY3NDY4ODE1OCwiZXhwIjoxNjc0Nzc0NTU4fQ.whzY03Qy7WPUq7rn4CPebnmPbZkP1Y8aXNrNZ7ruDOI'}\n"
     ]
    }
   ],
   "source": [
    "# tokens\n",
    "req_body = {'email': 'aanish@gmail.com', 'password': 'Helloesk!2'}\n",
    "res = requests.post(user_registry_base, json=req_body)\n",
    "token = res.json()['access_token']\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "174368b7",
   "metadata": {},
   "source": [
    "### Creating the session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "70ace363",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<RequestsCookieJar[<Cookie access_token_cookie=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NDY4ODE1OSwianRpIjoiMzRhNGU0MWEtYTY5Mi00YzE1LTg2ZDYtNGQxZDQxNTM1ODNmIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6NCwibmJmIjoxNjc0Njg4MTU5LCJleHAiOjE2NzQ3MDI1NTksImRvbWFpbiI6ImdtYWlsLmNvbSJ9.wDNrY4PrT5xK6bckfq9WyeRwkhphnagHK-RRODRS980 for 138.197.50.41/>, <Cookie refresh_token_cookie=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NDY4ODE1OSwianRpIjoiMjBkZWEwNmUtYWI2NS00Y2NmLTkxMzMtOWY4MDAzOTM2Y2IxIiwidHlwZSI6InJlZnJlc2giLCJzdWIiOjQsIm5iZiI6MTY3NDY4ODE1OSwiZXhwIjoxNjc0Nzc0NTU5fQ.dmSzm-WcqR1pBrQ5dqHaLPWFiUfXULakVh5p9zCTKNs for 138.197.50.41/>]>\n",
      "Cookies have been set successfully!\n"
     ]
    }
   ],
   "source": [
    "# using session to store cookies that are persistent\n",
    "session = requests.session()\n",
    "session.headers = headers = {\n",
    "    'Accept': 'application/json',\n",
    "    'Content-Type': 'application/json'\n",
    "}\n",
    "req_body = {'email': 'aanish@gmail.com', 'password': 'Helloesk!2'}\n",
    "res = session.post(user_registry_base, json=req_body)\n",
    "print(session.cookies)\n",
    "if res.status_code == 200:\n",
    "    print(\"Cookies have been set successfully!\")\n",
    "else:\n",
    "    print(\"An error occurred while setting the cookies.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52130716",
   "metadata": {},
   "source": [
    "### Update the phone number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "ccbf4dfa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'message': 'Nothing to be updated'}\n"
     ]
    }
   ],
   "source": [
    "# updating the phone number\n",
    "req_body = {'phone_num': '123500919', 'discoverable': 'false'}\n",
    "res = requests.post(user_registry_base + \"/update\", json=req_body, cookies=session.cookies)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dade7ce",
   "metadata": {},
   "source": [
    "### Sending token from User registry to Asset registry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "40943cad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Response [200]>\n"
     ]
    }
   ],
   "source": [
    "# sending tokens from user-registry to asset-registry base url\n",
    "tokenAuth = \"Bearer \" + token\n",
    "session.headers = headers = {\n",
    "    'Authorization': tokenAuth\n",
    "}\n",
    "res = session.get(user_registry_base + \"/asset-registry-home\", cookies=session.cookies)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c148b4ed",
   "metadata": {},
   "source": [
    "#### Protected means a private route, requires login\n",
    "#### Public routes donot require login"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7080c627",
   "metadata": {},
   "source": [
    "### Register a Field Boundary (protected)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "132daf88",
   "metadata": {},
   "source": [
    "#### Register first field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "3ebd4977",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Geo Id': '89d864f50bb864fb79fb5672f51da53991bc92e12c61f9222d5e35cd5ad52c0c', 'Message': 'Field Boundary already registered.'}\n"
     ]
    }
   ],
   "source": [
    "# first field\n",
    "polygon_1 = \"POLYGON((74.37392830848694 31.477080541856836,74.3768572807312 31.478022995170008,74.37714695930481 31.47740079404731,74.37631011009216 31.477016491287213,74.37425017356873 31.47641258376136,74.37392830848694 31.477080541856836))\"\n",
    "req_body = {\"wkt\": polygon_1}\n",
    "res = session.post(asset_registry_base + \"/register-field-boundary\", json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86b63fe0",
   "metadata": {},
   "source": [
    "#### Register second field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "0808bfec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'GEO ID': 'fb7b1a137d79436913d95a2e7739482e62bf8cf72cf500b0f9314814ede6db59', 'Message': 'Field Boundary registered successfully.', 'S2 Cell Tokens': None}\n"
     ]
    }
   ],
   "source": [
    "polygon_2 = \"POLYGON((74.37518526120425 31.477007341202274,74.37161255879641 31.474701491274956,74.37729884190799 31.473704102078116,74.37518526120425 31.477007341202274))\"\n",
    "req_body = {\"wkt\": polygon_2}\n",
    "res = session.post(asset_registry_base + \"/register-field-boundary\", json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc087c92",
   "metadata": {},
   "source": [
    "### Checking for the Token in Asset Registry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "f413f824",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'status': 200}\n"
     ]
    }
   ],
   "source": [
    "# confirming that the user is logged in\n",
    "res = session.get(asset_registry_base)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d1c084c",
   "metadata": {},
   "source": [
    "### Fetch a Field (public)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "d51db813",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'GEO Id': '89d864f50bb864fb79fb5672f51da53991bc92e12c61f9222d5e35cd5ad52c0c', 'Geo Data': None, 'Message': 'Field fetched successfully.'}\n"
     ]
    }
   ],
   "source": [
    "geo_id = \"89d864f50bb864fb79fb5672f51da53991bc92e12c61f9222d5e35cd5ad52c0c\" # geo id for the field to fetch\n",
    "res = session.get(asset_registry_base + f\"/fetch-field/{geo_id}\") # s2 index are indexes for which we need S2 cell token\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29a2f1d0",
   "metadata": {},
   "source": [
    "#### Fetch specific s2 index cell tokens [Optional parameter]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "f7cc640d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'GEO Id': '6f14410edb9ae3417a85c8686a5bbbb70fa8b68ef0d69c2960a803f0db4ebf9e', 'Geo Data': {'15': ['391905d7c', '391905d84', '391905d8c', '391906764', '39190676c', '391906774', '39190677c', '391906784', '39190679c'], '8': ['39191'], 'wkt': 'POLYGON((74.37522137108041 31.47851268355822,74.37249624672128 31.47408400867522,74.36957800331308 31.47853098343284,74.37522137108041 31.47851268355822))'}, 'Message': 'Field fetched successfully.'}\n"
     ]
    }
   ],
   "source": [
    "# S2 indexes of 8 and 15 are used here for the geo data\n",
    "geo_id = \"6f14410edb9ae3417a85c8686a5bbbb70fa8b68ef0d69c2960a803f0db4ebf9e\" # geo id for the field to fetch\n",
    "res = session.get(asset_registry_base + f\"/fetch-field/{geo_id}?s2_index=8,15\") # s2 index are indexes for which we need S2 cell tokens\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7bef738",
   "metadata": {},
   "source": [
    "### Fetch a Field WKT (public)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "9a0c6978",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'GEO Id': 'cf465e02d29e291e9cff70616d3395e7d23e7c04d8a3d1e0b6ef069cd18963a8', 'Message': 'WKT fetched successfully.', 'WKT': 'POLYGON ((-120.0015300000000025 36.8767399999999981, -120.0015400000000056 36.8778000000000006, -120.0015899999999931 36.8778700000000015, -120.0016099999999994 36.8780100000000033, -120.0021299999999940 36.8780199999999994, -120.0021500000000003 36.8779899999999969, -120.0021600000000035 36.8776599999999988, -120.0023800000000023 36.8776599999999988, -120.0037399999999934 36.8776500000000027, -120.0037300000000045 36.8779699999999977, -120.0037300000000045 36.8785499999999971, -120.0029399999999953 36.8785600000000002, -120.0028599999999983 36.8786300000000011, -120.0028499999999951 36.8787099999999981, -120.0028599999999983 36.8788100000000014, -120.0021899999999988 36.8787999999999982, -120.0021299999999940 36.8781899999999965, -120.0015999999999963 36.8781800000000004, -120.0016099999999994 36.8785000000000025, -120.0017699999999934 36.8785000000000025, -120.0017799999999966 36.8785900000000026, -120.0016099999999994 36.8785900000000026, -120.0016099999999994 36.8787299999999973, -120.0014999999999930 36.8788600000000031, -120.0015199999999993 36.8797799999999967, -120.0015599999999978 36.8797899999999998, -120.0015800000000041 36.8798499999999976, -120.0015499999999946 36.8799100000000024, -120.0015400000000056 36.8802999999999983, -120.0059300000000064 36.8802799999999991, -120.0059300000000064 36.8767799999999966, -120.0015300000000025 36.8767399999999981))'}\n"
     ]
    }
   ],
   "source": [
    "geo_id = \"cf465e02d29e291e9cff70616d3395e7d23e7c04d8a3d1e0b6ef069cd18963a8\" # geo id for the field wkt to fetch\n",
    "res = session.get(asset_registry_base + f\"/fetch-field-wkt/{geo_id}\")\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22de5df7",
   "metadata": {},
   "source": [
    "### Fetch Overlapping Fields for a given AOI (protected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "3302477e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'GEO Ids': ['6f14410edb9ae3417a85c8686a5bbbb70fa8b68ef0d69c2960a803f0db4ebf9e', '89d864f50bb864fb79fb5672f51da53991bc92e12c61f9222d5e35cd5ad52c0c', 'fb7b1a137d79436913d95a2e7739482e62bf8cf72cf500b0f9314814ede6db59'], 'Message': 'The field Geo Ids with percentage match of the given threshold.'}\n"
     ]
    }
   ],
   "source": [
    "aoi = \"POLYGON((74.37522137108041 31.47851268355822,74.37249624672128 31.47408400867522,74.36957800331308 31.47853098343284,74.37522137108041 31.47851268355822))\"\n",
    "# domain filter is optional\n",
    "req_body = {\n",
    "    \"wkt\": aoi,\n",
    "    \"resolution_level\": 13, # this can be upto Level 8, 13, 15, 18, 19, 20\n",
    "    \"threshold\": 10,\n",
    "    \"domain\": \"gmail.com\" # filters fields associated with a specific domain using the Authority Token\n",
    "}\n",
    "res = session.get(asset_registry_base + \"/fetch-overlapping-fields\", json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "adab78f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'GEO Ids': ['6f14410edb9ae3417a85c8686a5bbbb70fa8b68ef0d69c2960a803f0db4ebf9e', 'fb7b1a137d79436913d95a2e7739482e62bf8cf72cf500b0f9314814ede6db59'], 'Message': 'The field Geo Ids with percentage match of the given threshold.'}\n"
     ]
    }
   ],
   "source": [
    "aoi = \"POLYGON((74.37522137108041 31.47851268355822,74.37249624672128 31.47408400867522,74.36957800331308 31.47853098343284,74.37522137108041 31.47851268355822))\"\n",
    "# domain filter is optional\n",
    "req_body = {\n",
    "    \"wkt\": aoi,\n",
    "    \"resolution_level\": 20, # this can be upto Level 8, 13, 15, 18, 19, 20\n",
    "    \"threshold\": 10,\n",
    "    \"domain\": \"gmail.com\" # filters fields associated with a specific domain using the Authority Token\n",
    "}\n",
    "res = session.get(asset_registry_base + \"/fetch-overlapping-fields\", json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99fa015e",
   "metadata": {},
   "source": [
    "#### Fetch overlapping fields filtered by a specific domain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "038bdf36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'GEO Ids': ['6f14410edb9ae3417a85c8686a5bbbb70fa8b68ef0d69c2960a803f0db4ebf9e', '89d864f50bb864fb79fb5672f51da53991bc92e12c61f9222d5e35cd5ad52c0c', 'fb7b1a137d79436913d95a2e7739482e62bf8cf72cf500b0f9314814ede6db59'], 'Message': 'The field Geo Ids with percentage match of the given threshold.'}\n"
     ]
    }
   ],
   "source": [
    "aoi = \"POLYGON((74.37522137108041 31.47851268355822,74.37249624672128 31.47408400867522,74.36957800331308 31.47853098343284,74.37522137108041 31.47851268355822))\"\n",
    "# domain filter is optional\n",
    "req_body = {\n",
    "    \"wkt\": aoi,\n",
    "    \"resolution_level\": 13,\n",
    "    \"threshold\": 10,\n",
    "    \"domain\": \"\" # filters fields associated with test.com domain\n",
    "}\n",
    "res = session.get(asset_registry_base + \"/fetch-overlapping-fields\", json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2421654f",
   "metadata": {},
   "source": [
    "### Get Percentage overlap of two fields (public)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "61102a09",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Percentage Overlap': '9.079678814082767 %'}\n"
     ]
    }
   ],
   "source": [
    "req_body = {\n",
    "    \"geo_id_field_1\": \"6f14410edb9ae3417a85c8686a5bbbb70fa8b68ef0d69c2960a803f0db4ebf9e\",\n",
    "    \"geo_id_field_2\": \"89d864f50bb864fb79fb5672f51da53991bc92e12c61f9222d5e35cd5ad52c0c\"\n",
    "}\n",
    "res = session.post(asset_registry_base + \"/get-percentage-overlap-two-fields\", json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "264fa114",
   "metadata": {},
   "source": [
    "### Fetch fields for a Point (protected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "00ceb1f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Fetched fields': [{'6f14410edb9ae3417a85c8686a5bbbb70fa8b68ef0d69c2960a803f0db4ebf9e': None}, {'89d864f50bb864fb79fb5672f51da53991bc92e12c61f9222d5e35cd5ad52c0c': None}, {'fb7b1a137d79436913d95a2e7739482e62bf8cf72cf500b0f9314814ede6db59': None}]}\n"
     ]
    }
   ],
   "source": [
    "req_body = {\n",
    "    \"latitude\": 31.47704430446457,\n",
    "    \"longitude\": 74.37510786779589\n",
    "}\n",
    "res = session.post(asset_registry_base + \"/fetch-fields-for-a-point\", json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79df2577",
   "metadata": {},
   "source": [
    "#### Fetch specific s2 index cell tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "9cf0c416",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Fetched fields': [{'6f14410edb9ae3417a85c8686a5bbbb70fa8b68ef0d69c2960a803f0db4ebf9e': {'15': ['391905d7c', '391905d84', '391905d8c', '391906764', '39190676c', '391906774', '39190677c', '391906784', '39190679c'], '8': ['39191'], 'wkt': 'POLYGON((74.37522137108041 31.47851268355822,74.37249624672128 31.47408400867522,74.36957800331308 31.47853098343284,74.37522137108041 31.47851268355822))'}}, {'89d864f50bb864fb79fb5672f51da53991bc92e12c61f9222d5e35cd5ad52c0c': {'15': ['391905d8c', '391905df4', '39190675c', '391906764'], '8': ['39191'], 'wkt': 'POLYGON((74.37392830848694 31.477080541856836,74.3768572807312 31.478022995170008,74.37714695930481 31.47740079404731,74.37631011009216 31.477016491287213,74.37425017356873 31.47641258376136,74.37392830848694 31.477080541856836))'}}, {'fb7b1a137d79436913d95a2e7739482e62bf8cf72cf500b0f9314814ede6db59': {'15': ['391906744', '39190675c', '391906764', '39190676c', '391906774', '39190677c'], '8': ['39191'], 'wkt': 'POLYGON((74.37518526120425 31.477007341202274,74.37161255879641 31.474701491274956,74.37729884190799 31.473704102078116,74.37518526120425 31.477007341202274))'}}]}\n"
     ]
    }
   ],
   "source": [
    "ll_body = {\n",
    "    \"latitude\": 31.47704430446457,\n",
    "    \"longitude\": 74.37510786779589,\n",
    "    \"s2_index\": \"8,15\" # s2 index are indexes for which we need S2 cell tokens\n",
    "}\n",
    "res = session.post(asset_registry_base + \"/fetch-fields-for-a-point\", json=ll_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f587504f",
   "metadata": {},
   "source": [
    "### Fetch the Bounding Box Fields (protected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "2da574e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Message': [{'6f14410edb9ae3417a85c8686a5bbbb70fa8b68ef0d69c2960a803f0db4ebf9e': None}, {'89d864f50bb864fb79fb5672f51da53991bc92e12c61f9222d5e35cd5ad52c0c': None}, {'fb7b1a137d79436913d95a2e7739482e62bf8cf72cf500b0f9314814ede6db59': None}]}\n"
     ]
    }
   ],
   "source": [
    "db_body = {\n",
    "    \"latitudes\": \"31.477779423633137 31.478602920901388 31.474320655972566 31.47543699178076\",\n",
    "    \"longitudes\": \"74.3729835582561 74.38032208212084 74.37404571302599 74.38112674482531\"\n",
    "}\n",
    "res = session.post(asset_registry_base + \"/fetch-bounding-box-fields\", json=db_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cef1809b",
   "metadata": {},
   "source": [
    "#### Fetch specific s2 index cell tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "fe7f7705",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Message': [{'6f14410edb9ae3417a85c8686a5bbbb70fa8b68ef0d69c2960a803f0db4ebf9e': {'15': ['391905d7c', '391905d84', '391905d8c', '391906764', '39190676c', '391906774', '39190677c', '391906784', '39190679c'], '8': ['39191'], 'wkt': 'POLYGON((74.37522137108041 31.47851268355822,74.37249624672128 31.47408400867522,74.36957800331308 31.47853098343284,74.37522137108041 31.47851268355822))'}}, {'89d864f50bb864fb79fb5672f51da53991bc92e12c61f9222d5e35cd5ad52c0c': {'15': ['391905d8c', '391905df4', '39190675c', '391906764'], '8': ['39191'], 'wkt': 'POLYGON((74.37392830848694 31.477080541856836,74.3768572807312 31.478022995170008,74.37714695930481 31.47740079404731,74.37631011009216 31.477016491287213,74.37425017356873 31.47641258376136,74.37392830848694 31.477080541856836))'}}, {'fb7b1a137d79436913d95a2e7739482e62bf8cf72cf500b0f9314814ede6db59': {'15': ['391906744', '39190675c', '391906764', '39190676c', '391906774', '39190677c'], '8': ['39191'], 'wkt': 'POLYGON((74.37518526120425 31.477007341202274,74.37161255879641 31.474701491274956,74.37729884190799 31.473704102078116,74.37518526120425 31.477007341202274))'}}]}\n"
     ]
    }
   ],
   "source": [
    "db_body = {\n",
    "    \"latitudes\": \"31.477779423633137 31.478602920901388 31.474320655972566 31.47543699178076\",\n",
    "    \"longitudes\": \"74.3729835582561 74.38032208212084 74.37404571302599 74.38112674482531\",\n",
    "    \"s2_index\": \"8,15\" # s2 index are indexes for which we need S2 cell tokens\n",
    "}\n",
    "res = session.post(asset_registry_base + \"/fetch-bounding-box-fields\", json=db_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d5049a9",
   "metadata": {},
   "source": [
    "### Logout (protected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "d51242cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<RequestsCookieJar[<Cookie access_token_cookie=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NDY4ODE1OSwianRpIjoiMzRhNGU0MWEtYTY5Mi00YzE1LTg2ZDYtNGQxZDQxNTM1ODNmIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6NCwibmJmIjoxNjc0Njg4MTU5LCJleHAiOjE2NzQ3MDI1NTksImRvbWFpbiI6ImdtYWlsLmNvbSJ9.wDNrY4PrT5xK6bckfq9WyeRwkhphnagHK-RRODRS980 for 138.197.50.41/>, <Cookie refresh_token_cookie=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY3NDY4ODE1OSwianRpIjoiMjBkZWEwNmUtYWI2NS00Y2NmLTkxMzMtOWY4MDAzOTM2Y2IxIiwidHlwZSI6InJlZnJlc2giLCJzdWIiOjQsIm5iZiI6MTY3NDY4ODE1OSwiZXhwIjoxNjc0Nzc0NTU5fQ.dmSzm-WcqR1pBrQ5dqHaLPWFiUfXULakVh5p9zCTKNs for 138.197.50.41/>]>\n",
      "{'Message': 'Logged out successfully.'}\n",
      "<RequestsCookieJar[]>\n"
     ]
    }
   ],
   "source": [
    "res = session.get(asset_registry_base + \"/logout\")\n",
    "print(session.cookies)\n",
    "print(res.json())\n",
    "res = session.get(user_registry_base + \"/logout\", cookies=session.cookies)\n",
    "print(session.cookies)\n",
    "session.headers.clear()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d7ef7cf",
   "metadata": {},
   "source": [
    "### Checking if Logged out correctly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "d6dee3bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'error': \"Invalid token type. Token must be a <class 'bytes'>\", 'message': 'Need to Login.'}\n"
     ]
    }
   ],
   "source": [
    "# Confirming the logout from Asset Registry by requesting a Protected route\n",
    "req_body = {\n",
    "    \"latitude\": 31.47704430446457,\n",
    "    \"longitude\": 74.37510786779589\n",
    "}\n",
    "res = session.post(asset_registry_base + \"/fetch-fields-for-a-point\", json=req_body)\n",
    "print(res.json())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a07b78b",
   "metadata": {},
   "source": [
    "### Get all Domains (public)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "93cf8a1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Domains': ['test.com', 'gmail.com', 'e.com', 'fishy.com', 'tester.com', 'hotmail.com'], 'Message': 'All domains'}\n"
     ]
    }
   ],
   "source": [
    "# Fetching all the domains from the User Registry\n",
    "res = session.get(asset_registry_base + \"/domains\")\n",
    "print(res.json())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
